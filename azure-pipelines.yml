strategy:
  matrix:
    windows:
      jobArchName: 'Windows'
      imageName: 'windows-latest'
      artifactPrefix: ''
      artifactSuffix: ''
      testers: ';fx;core2.1;core3;core3.1;core5;core6;core7;'
      testx86: 'true'
      generateDocFX: 'false'
      pushNuGet: 'true'
    linux:
      jobArchName: 'Linux'
      imageName: 'ubuntu-latest'
      artifactPrefix: '~dbg.linux.'
      artifactSuffix: ''
      testers: ';mono;core2.1;core3;core3.1;core5;core6;core7;'
      testx86: 'false'
      generateDocFX: 'false'
      pushNuGet: 'false'
    macos:
      jobArchName: 'macOS'
      imageName: 'macOS-latest'
      artifactPrefix: '~dbg.macos.'
      artifactSuffix: ''
      testers: ';mono;core2.1;core3;core3.1;core5;core6;core7;'
      testx86: 'false'
      generateDocFX: 'false'
      pushNuGet: 'false'
  maxParallel: 4

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  xunitVer: '2.4.2'
  xunit: '{0}{1}/.nuget/packages/xunit.runner.console/$(xunitVer)/tools/{2}/xunit.console.{3} artifacts/bin/MonoMod.UnitTest/Release/{6}/MonoMod.UnitTest.dll -xml testresults.{4}.{6}.xml {5}'

name: '$(Date:y.M.d).$(Rev:r)'

pool:
  vmImage: '$(imageName)'

steps:
- checkout: self
  clean: false
  fetchDepth: 2
  lfs: false
  submodules: recursive

# Run pre-build steps.
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 2.1.x'
  inputs:
    packageType: sdk
    version: '2.1.x'
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 3.0.x'
  inputs:
    packageType: sdk
    version: '3.0.x'
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 3.1.x'
  inputs:
    packageType: sdk
    version: '3.1.x'
- task: UseDotNet@2
  condition: contains(variables.testers, ';core5;')
  displayName: 'Install .NET SDK 5.0.x'
  inputs:
    packageType: sdk
    version: '5.0.x'
- task: UseDotNet@2
  condition: contains(variables.testers, ';core6;')
  displayName: 'Install .NET SDK 6.0.x'
  inputs:
    packageType: sdk
    version: '6.0.x'
- task: UseDotNet@2
  condition: contains(variables.testers, ';core7;')
  displayName: 'Install .NET SDK 7.0.x'
  inputs:
    packageType: sdk
    version: '7.0.x'
- task: NuGetToolInstaller@1
  displayName: 'Update NuGet'
  inputs:
    checkLatest: true
- task: DotNetCoreCLI@2
  displayName: 'dotnet: Restore'
  inputs:
    command: 'restore'
    arguments: '-p:XunitVersion="$(xunitVer)"'

# Build using core. Mono's msbuild started to cause too many issues.
- task: DotNetCoreCLI@2
  displayName: 'dotnet: Build'
  inputs:
    command: 'build'
    arguments: '-c $(buildConfiguration) -p:XunitVersion="$(xunitVer)" -p:VersionSuffix="daily.$(Build.BuildNumber)"'

# Create and "publish" main artifacts.
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'net35'
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'net452'
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'netstandard2.0'
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'net5.0'
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'net6.0'

# Create and "publish" nupkg artifacts.
- task: DotNetCoreCLI@2
  displayName: 'Artifacts: Pack: nupkgs'
  continueOnError: true
  inputs:
    #command: 'pack'
    command: 'custom' # if you use command: pack, then you *have* to set packagesToPack, despite not providing it doing the right thing
    custom: 'pack'
    arguments: '-c $(buildConfiguration) -p:XunitVersion="$(xunitVer)" -p:VersionSuffix="daily.$(Build.BuildNumber)"'
    nobuild: true
    configuration: '$(buildConfiguration)'
    versioningScheme: 'byBuildNumber'
    #packagesToPack: 'MonoMod@(|.Common|.Utils|.RuntimeDetour|.RuntimeDetour.HookGen)/*.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)/nupkgs'
- task: PublishBuildArtifacts@1
  displayName: 'Artifacts: Publish: nupkgs'
  continueOnError: true
  inputs:
    pathtoPublish: 'artifacts/packages/$(buildConfiguration)'
    artifactName: '$(artifactPrefix)nupkgs$(artifactSuffix)'
    publishLocation: 'Container'
- task: NuGetCommand@2
  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.pushNuGet, 'true'))
  displayName: 'Artifacts: Push: nupkgs'
  inputs:
    command: push
    packagesToPush: 'artifacts/packages/$(buildConfiguration)/*.nupkg'
    publishVstsFeed: '572c97eb-dbaa-4a55-90e5-1d05431535bd/72ad568d-c548-4599-8b0a-9ea52b45bbbd'
#- task: PowerShell@2
#  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.pushNuGet, 'true'))
#  displayName: 'Artifacts: Prepare: MonoMod.Common to nuget.org'
#  continueOnError: true
#  inputs:
#    filePath: 'azure-pipelines-prepushcommon.ps1'
#    arguments: '$(Build.ArtifactStagingDirectory)/nupkgs/MonoMod.Common.*.nupkg'
#- task: NuGetCommand@2
#  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.pushNuGet, 'true'))
#  displayName: 'Artifacts: Push: MonoMod.Common to nuget.org'
#  inputs:
#    command: 'push'
#    packagesToPush: '$(Build.ArtifactStagingDirectory)/nupkgs/MonoMod.Common.*.nupkg'
#    nuGetFeedType: 'external'
#    publishFeedCredentials: 'NuGet MonoMod'

# Run tests.
# I've tried to simplify this mess. It's impossible. --ade
- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';fx;'))
  displayName: 'Test: fx: net452'
  inputs:
    script: ${{format(variables.xunit, '', '%userprofile%', 'net452', 'exe', 'fx', '', 'net46')}}
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';fx;'))
  displayName: 'Test: Publish: fx: net46'
  inputs:
    testResultsFormat: 'xUnit'
    testResultsFiles: '**/testresults.fx.net46.xml'
    testRunTitle: 'Tests @ $(jobArchName) fx net46'

- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';mono;'))
  displayName: 'Test: mono: net46'
  inputs:
    script: ${{format(variables.xunit, 'mono --debug ', '~', 'net452', 'exe', 'mono', '', 'net46')}}
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';mono;'))
  displayName: 'Test: Publish: mono: net46'
  inputs:
    testResultsFormat: 'xUnit'
    testResultsFiles: '**/testresults.mono.net46.xml'
    testRunTitle: 'Tests @ $(jobArchName) mono net46'

- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';monoslow;'))
  displayName: 'Test: monoslow: net46'
  inputs:
    script: ${{format(variables.xunit, 'mono --debug ', '~', 'net452', 'exe', 'monoslow', '-parallel none -appdomains denied -verbose', 'net46')}}
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';monoslow;'))
  displayName: 'Test: Publish: monoslow: net46'
  inputs:
    testResultsFormat: 'xUnit'
    testResultsFiles: '**/testresults.monoslow.net46.xml'
    testRunTitle: 'Tests @ $(jobArchName) monoslow net46'
    
# All of the .NET Core tests run via azure-pipelines-coretest.yml, and have an optional 'arch' parameter to allow specific arch selection
- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(true, contains(variables.testers, ';core2.1;'))
    targetFramework: 'netcoreapp2.1'

- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(true, contains(variables.testers, ';core3;'))
    targetFramework: 'netcoreapp3.0'
    arch: 'x64'
- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(contains(variables.testers, ';core3;'), eq(variables.testx86, 'true'))
    targetFramework: 'netcoreapp3.0'
    arch: 'x86'

- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(true, contains(variables.testers, ';core3.1;'))
    targetFramework: 'netcoreapp3.1'
    arch: 'x64'
- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(contains(variables.testers, ';core3.1;'), eq(variables.testx86, 'true'))
    targetFramework: 'netcoreapp3.1'
    arch: 'x86'

- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(true, contains(variables.testers, ';core5;'))
    targetFramework: 'net5.0'
    arch: 'x64'
- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(contains(variables.testers, ';core5;'), eq(variables.testx86, 'true'))
    targetFramework: 'net5.0'
    arch: 'x86'

- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(true, contains(variables.testers, ';core6;'))
    targetFramework: 'net6.0'
    arch: 'x64'
- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(contains(variables.testers, ';core6;'), eq(variables.testx86, 'true'))
    targetFramework: 'net6.0'
    arch: 'x86'

- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(true, contains(variables.testers, ';core7;'))
    targetFramework: 'net7.0'
    arch: 'x64'
- template: 'azure-pipelines-coretest.yml'
  parameters:
    condition: and(contains(variables.testers, ';core7;'), eq(variables.testx86, 'true'))
    targetFramework: 'net7.0'
    arch: 'x86'

# Rebuild and publish the DocFX page.
- task: PowerShell@2
  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.generateDocFX, 'true'))
  displayName: 'DocFX'
  continueOnError: true
  inputs:
    filePath: 'azure-pipelines-docfx.ps1'
    arguments: '$(GitHubBotName) $(GitHubBotEmail) $(GitHubBotToken)'
