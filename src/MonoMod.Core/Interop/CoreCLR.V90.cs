using System.Diagnostics.CodeAnalysis;

namespace MonoMod.Core.Interop
{
    internal static unsafe partial class CoreCLR
    {

        [SuppressMessage("Performance", "CA1812: Avoid uninstantiated internal classes",
            Justification = "It must be non-static to be able to inherit others, as it does. This allows the Core*Runtime types " +
            "to each reference exactly the version they represent, and the compiler automatically resolves the correct one without " +
            "needing duplicates.")]
        [SuppressMessage("Performance", "CA1852", Justification = "This type will be derived for .NET 8.")]
        public class V90 : V80
        {
            public new static class ICorJitInfoVtable
            {
                // src\coreclr\inc\corinfo.h:2005
                // class ICorStaticInfo
                // 00: bool isIntrinsic(CORINFO_METHOD_HANDLE)
                // 01: bool notifyMethodInfoUsage(CORINFO_METHOD_HANDLE)
                // 02: uint32_t getMethodAttribs(CORINFO_METHOD_HANDLE)
                // 03: void setMethodAttribs(CORINFO_METHOD_HANDLE, CorInfoMethodRuntimeFlags)
                // 04: void getMethodSig(CORINFO_METHOD_HANDLE, CORINFO_SIG_INFO *, CORINFO_CLASS_HANDLE)
                // 05: bool getMethodInfo(CORINFO_METHOD_HANDLE, CORINFO_METHOD_INFO *, CORINFO_CONTEXT_HANDLE)
                // 06: bool haveSameMethodDefinition(CORINFO_METHOD_HANDLE, CORINFO_METHOD_HANDLE)
                // 07: CORINFO_CLASS_HANDLE getTypeDefinition(CORINFO_CLASS_HANDLE)
                // 08: CorInfoInline canInline(CORINFO_METHOD_HANDLE, CORINFO_METHOD_HANDLE)
                // 09: void beginInlining(CORINFO_METHOD_HANDLE, CORINFO_METHOD_HANDLE)
                // 0A: void reportInliningDecision(CORINFO_METHOD_HANDLE, CORINFO_METHOD_HANDLE, CorInfoInline, const char *)
                // 0B: bool canTailCall(CORINFO_METHOD_HANDLE, CORINFO_METHOD_HANDLE, CORINFO_METHOD_HANDLE, bool)
                // 0C: void reportTailCallDecision(CORINFO_METHOD_HANDLE, CORINFO_METHOD_HANDLE, bool, CorInfoTailCall, const char *)
                // 0D: void getEHinfo(CORINFO_METHOD_HANDLE, unsigned int, CORINFO_EH_CLAUSE *)
                // 0E: CORINFO_CLASS_HANDLE getMethodClass(CORINFO_METHOD_HANDLE)
                // 0F: void getMethodVTableOffset(CORINFO_METHOD_HANDLE, unsigned int *, unsigned int *, bool *)
                // 10: bool resolveVirtualMethod(CORINFO_DEVIRTUALIZATION_INFO *)
                // 11: CORINFO_METHOD_HANDLE getUnboxedEntry(CORINFO_METHOD_HANDLE, bool *)
                // 12: CORINFO_CLASS_HANDLE getDefaultComparerClass(CORINFO_CLASS_HANDLE)
                // 13: CORINFO_CLASS_HANDLE getDefaultEqualityComparerClass(CORINFO_CLASS_HANDLE)
                // 14: void expandRawHandleIntrinsic(CORINFO_RESOLVED_TOKEN *, CORINFO_METHOD_HANDLE, CORINFO_GENERICHANDLE_RESULT *)
                // 15: bool isIntrinsicType(CORINFO_CLASS_HANDLE)
                // 16: CorInfoCallConvExtension getUnmanagedCallConv(CORINFO_METHOD_HANDLE, CORINFO_SIG_INFO *, bool *)
                // 17: bool pInvokeMarshalingRequired(CORINFO_METHOD_HANDLE, CORINFO_SIG_INFO *)
                // 18: bool satisfiesMethodConstraints(CORINFO_CLASS_HANDLE, CORINFO_METHOD_HANDLE)
                // 19: void methodMustBeLoadedBeforeCodeIsRun(CORINFO_METHOD_HANDLE)
                // 1A: void getGSCookie(GSCookie *, GSCookie **)
                // 1B: void setPatchpointInfo(PatchpointInfo *)
                // 1C: PatchpointInfo * getOSRInfo(unsigned int *)
                // 1D: void resolveToken(CORINFO_RESOLVED_TOKEN *)
                // 1E: void findSig(CORINFO_MODULE_HANDLE, unsigned int, CORINFO_CONTEXT_HANDLE, CORINFO_SIG_INFO *)
                // 1F: void findCallSiteSig(CORINFO_MODULE_HANDLE, unsigned int, CORINFO_CONTEXT_HANDLE, CORINFO_SIG_INFO *)
                // 20: CORINFO_CLASS_HANDLE getTokenTypeAsHandle(CORINFO_RESOLVED_TOKEN *)
                // 21: int getStringLiteral(CORINFO_MODULE_HANDLE, unsigned int, char16_t *, int, int)
                // 22: size_t printObjectDescription(CORINFO_OBJECT_HANDLE, char *, size_t, size_t *)
                // 23: CorInfoType asCorInfoType(CORINFO_CLASS_HANDLE)
                // 24: const char * getClassNameFromMetadata(CORINFO_CLASS_HANDLE, const char **)
                // 25: CORINFO_CLASS_HANDLE getTypeInstantiationArgument(CORINFO_CLASS_HANDLE, unsigned int)
                // 26: size_t printClassName(CORINFO_CLASS_HANDLE, char *, size_t, size_t *)
                // 27: bool isValueClass(CORINFO_CLASS_HANDLE)
                // 28: uint32_t getClassAttribs(CORINFO_CLASS_HANDLE)
                // 29: CORINFO_MODULE_HANDLE getClassModule(CORINFO_CLASS_HANDLE)
                // 2A: CORINFO_ASSEMBLY_HANDLE getModuleAssembly(CORINFO_MODULE_HANDLE)
                // 2B: const char * getAssemblyName(CORINFO_ASSEMBLY_HANDLE)
                // 2C: void * LongLifetimeMalloc(size_t)
                // 2D: void LongLifetimeFree(void *)
                // 2E: bool getIsClassInitedFlagAddress(CORINFO_CLASS_HANDLE, CORINFO_CONST_LOOKUP *, int *)
                // 2F: size_t getClassStaticDynamicInfo(CORINFO_CLASS_HANDLE)
                // 30: size_t getClassThreadStaticDynamicInfo(CORINFO_CLASS_HANDLE)
                // 31: bool getStaticBaseAddress(CORINFO_CLASS_HANDLE, bool, CORINFO_CONST_LOOKUP *)
                // 32: unsigned int getClassSize(CORINFO_CLASS_HANDLE)
                // 33: unsigned int getHeapClassSize(CORINFO_CLASS_HANDLE)
                // 34: bool canAllocateOnStack(CORINFO_CLASS_HANDLE)
                // 35: unsigned int getClassAlignmentRequirement(CORINFO_CLASS_HANDLE, bool)
                // 36: unsigned int getClassGClayout(CORINFO_CLASS_HANDLE, uint8_t *)
                // 37: unsigned int getClassNumInstanceFields(CORINFO_CLASS_HANDLE)
                // 38: CORINFO_FIELD_HANDLE getFieldInClass(CORINFO_CLASS_HANDLE, int32_t)
                // 39: GetTypeLayoutResult getTypeLayout(CORINFO_CLASS_HANDLE, CORINFO_TYPE_LAYOUT_NODE *, size_t *)
                // 3A: bool checkMethodModifier(CORINFO_METHOD_HANDLE, const char *, bool)
                // 3B: CorInfoHelpFunc getNewHelper(CORINFO_CLASS_HANDLE, bool *)
                // 3C: CorInfoHelpFunc getNewArrHelper(CORINFO_CLASS_HANDLE)
                // 3D: CorInfoHelpFunc getCastingHelper(CORINFO_RESOLVED_TOKEN *, bool)
                // 3E: CorInfoHelpFunc getSharedCCtorHelper(CORINFO_CLASS_HANDLE)
                // 3F: CORINFO_CLASS_HANDLE getTypeForBox(CORINFO_CLASS_HANDLE)
                // 40: CORINFO_CLASS_HANDLE getTypeForBoxOnStack(CORINFO_CLASS_HANDLE)
                // 41: CorInfoHelpFunc getBoxHelper(CORINFO_CLASS_HANDLE)
                // 42: CorInfoHelpFunc getUnBoxHelper(CORINFO_CLASS_HANDLE)
                // 43: CORINFO_OBJECT_HANDLE getRuntimeTypePointer(CORINFO_CLASS_HANDLE)
                // 44: bool isObjectImmutable(CORINFO_OBJECT_HANDLE)
                // 45: bool getStringChar(CORINFO_OBJECT_HANDLE, int, uint16_t *)
                // 46: CORINFO_CLASS_HANDLE getObjectType(CORINFO_OBJECT_HANDLE)
                // 47: bool getReadyToRunHelper(CORINFO_RESOLVED_TOKEN *, CORINFO_LOOKUP_KIND *, CorInfoHelpFunc, CORINFO_METHOD_HANDLE, CORINFO_CONST_LOOKUP *)
                // 48: void getReadyToRunDelegateCtorHelper(CORINFO_RESOLVED_TOKEN *, mdToken, CORINFO_CLASS_HANDLE, CORINFO_METHOD_HANDLE, CORINFO_LOOKUP *)
                // 49: CorInfoInitClassResult initClass(CORINFO_FIELD_HANDLE, CORINFO_METHOD_HANDLE, CORINFO_CONTEXT_HANDLE)
                // 4A: void classMustBeLoadedBeforeCodeIsRun(CORINFO_CLASS_HANDLE)
                // 4B: CORINFO_CLASS_HANDLE getBuiltinClass(CorInfoClassId)
                // 4C: CorInfoType getTypeForPrimitiveValueClass(CORINFO_CLASS_HANDLE)
                // 4D: CorInfoType getTypeForPrimitiveNumericClass(CORINFO_CLASS_HANDLE)
                // 4E: bool canCast(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE)
                // 4F: TypeCompareState compareTypesForCast(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE)
                // 50: TypeCompareState compareTypesForEquality(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE)
                // 51: bool isMoreSpecificType(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE)
                // 52: bool isExactType(CORINFO_CLASS_HANDLE)
                // 53: TypeCompareState isGenericType(CORINFO_CLASS_HANDLE)
                // 54: TypeCompareState isNullableType(CORINFO_CLASS_HANDLE)
                // 55: TypeCompareState isEnum(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE *)
                // 56: CORINFO_CLASS_HANDLE getParentType(CORINFO_CLASS_HANDLE)
                // 57: CorInfoType getChildType(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE *)
                // 58: bool isSDArray(CORINFO_CLASS_HANDLE)
                // 59: unsigned int getArrayRank(CORINFO_CLASS_HANDLE)
                // 5A: CorInfoArrayIntrinsic getArrayIntrinsicID(CORINFO_METHOD_HANDLE)
                // 5B: void * getArrayInitializationData(CORINFO_FIELD_HANDLE, uint32_t)
                // 5C: CorInfoIsAccessAllowedResult canAccessClass(CORINFO_RESOLVED_TOKEN *, CORINFO_METHOD_HANDLE, CORINFO_HELPER_DESC *)
                // 5D: size_t printFieldName(CORINFO_FIELD_HANDLE, char *, size_t, size_t *)
                // 5E: CORINFO_CLASS_HANDLE getFieldClass(CORINFO_FIELD_HANDLE)
                // 5F: CorInfoType getFieldType(CORINFO_FIELD_HANDLE, CORINFO_CLASS_HANDLE *, CORINFO_CLASS_HANDLE)
                // 60: unsigned int getFieldOffset(CORINFO_FIELD_HANDLE)
                // 61: void getFieldInfo(CORINFO_RESOLVED_TOKEN *, CORINFO_METHOD_HANDLE, CORINFO_ACCESS_FLAGS, CORINFO_FIELD_INFO *)
                // 62: uint32_t getThreadLocalFieldInfo(CORINFO_FIELD_HANDLE, bool)
                // 63: void getThreadLocalStaticBlocksInfo(CORINFO_THREAD_STATIC_BLOCKS_INFO *)
                // 64: void getThreadLocalStaticInfo_NativeAOT(CORINFO_THREAD_STATIC_INFO_NATIVEAOT *)
                // 65: bool isFieldStatic(CORINFO_FIELD_HANDLE)
                // 66: int getArrayOrStringLength(CORINFO_OBJECT_HANDLE)
                // 67: void getBoundaries(CORINFO_METHOD_HANDLE, unsigned int *, uint32_t **, ICorDebugInfo::BoundaryTypes *)
                // 68: void setBoundaries(CORINFO_METHOD_HANDLE, uint32_t, ICorDebugInfo::OffsetMapping *)
                // 69: void getVars(CORINFO_METHOD_HANDLE, uint32_t *, ICorDebugInfo::ILVarInfo **, bool *)
                // 6A: void setVars(CORINFO_METHOD_HANDLE, uint32_t, ICorDebugInfo::NativeVarInfo *)
                // 6B: void reportRichMappings(ICorDebugInfo::InlineTreeNode *, uint32_t, ICorDebugInfo::RichOffsetMapping *, uint32_t)
                // 6C: void reportMetadata(const char *, const void *, size_t)
                // 6D: void * allocateArray(size_t)
                // 6E: void freeArray(void *)
                // 6F: CORINFO_ARG_LIST_HANDLE getArgNext(CORINFO_ARG_LIST_HANDLE)
                // 70: CorInfoTypeWithMod getArgType(CORINFO_SIG_INFO *, CORINFO_ARG_LIST_HANDLE, CORINFO_CLASS_HANDLE *)
                // 71: int getExactClasses(CORINFO_CLASS_HANDLE, int, CORINFO_CLASS_HANDLE *)
                // 72: CORINFO_CLASS_HANDLE getArgClass(CORINFO_SIG_INFO *, CORINFO_ARG_LIST_HANDLE)
                // 73: CorInfoHFAElemType getHFAType(CORINFO_CLASS_HANDLE)
                // 74: bool runWithErrorTrap(errorTrapFunction, void *)
                // 75: bool runWithSPMIErrorTrap(errorTrapFunction, void *)
                // 76: void getEEInfo(CORINFO_EE_INFO *)
                // 77: const char16_t * getJitTimeLogFilename()
                // 78: mdMethodDef getMethodDefFromMethod(CORINFO_METHOD_HANDLE)
                // 79: size_t printMethodName(CORINFO_METHOD_HANDLE, char *, size_t, size_t *)
                // 7A: const char * getMethodNameFromMetadata(CORINFO_METHOD_HANDLE, const char **, const char **, const char **)
                // 7B: unsigned int getMethodHash(CORINFO_METHOD_HANDLE)
                // 7C: bool getSystemVAmd64PassStructInRegisterDescriptor(CORINFO_CLASS_HANDLE, SYSTEMV_AMD64_CORINFO_STRUCT_REG_PASSING_DESCRIPTOR *)
                // 7D: void getSwiftLowering(CORINFO_CLASS_HANDLE, CORINFO_SWIFT_LOWERING *)
                // 7E: uint32_t getLoongArch64PassStructInRegisterFlags(CORINFO_CLASS_HANDLE)
                // 7F: uint32_t getRISCV64PassStructInRegisterFlags(CORINFO_CLASS_HANDLE)
                //
                // src\coreclr\inc\corinfo.h:3078
                // class ICorDynamicInfo
                // 80: uint32_t getThreadTLSIndex(void **)
                // 81: int32_t * getAddrOfCaptureThreadGlobal(void **)
                // 82: void * getHelperFtn(CorInfoHelpFunc, void **)
                // 83: void getFunctionEntryPoint(CORINFO_METHOD_HANDLE, CORINFO_CONST_LOOKUP *, CORINFO_ACCESS_FLAGS)
                // 84: void getFunctionFixedEntryPoint(CORINFO_METHOD_HANDLE, bool, CORINFO_CONST_LOOKUP *)
                // 85: void * getMethodSync(CORINFO_METHOD_HANDLE, void **)
                // 86: CorInfoHelpFunc getLazyStringLiteralHelper(CORINFO_MODULE_HANDLE)
                // 87: CORINFO_MODULE_HANDLE embedModuleHandle(CORINFO_MODULE_HANDLE, void **)
                // 88: CORINFO_CLASS_HANDLE embedClassHandle(CORINFO_CLASS_HANDLE, void **)
                // 89: CORINFO_METHOD_HANDLE embedMethodHandle(CORINFO_METHOD_HANDLE, void **)
                // 8A: CORINFO_FIELD_HANDLE embedFieldHandle(CORINFO_FIELD_HANDLE, void **)
                // 8B: void embedGenericHandle(CORINFO_RESOLVED_TOKEN *, bool, CORINFO_METHOD_HANDLE, CORINFO_GENERICHANDLE_RESULT *)
                // 8C: void getLocationOfThisType(CORINFO_METHOD_HANDLE, CORINFO_LOOKUP_KIND *)
                // 8D: void getAddressOfPInvokeTarget(CORINFO_METHOD_HANDLE, CORINFO_CONST_LOOKUP *)
                // 8E: void * GetCookieForPInvokeCalliSig(CORINFO_SIG_INFO *, void **)
                // 8F: bool canGetCookieForPInvokeCalliSig(CORINFO_SIG_INFO *)
                // 90: CORINFO_JUST_MY_CODE_HANDLE getJustMyCodeHandle(CORINFO_METHOD_HANDLE, CORINFO_JUST_MY_CODE_HANDLE **)
                // 91: void GetProfilingHandle(bool *, void **, bool *)
                // 92: void getCallInfo(CORINFO_RESOLVED_TOKEN *, CORINFO_RESOLVED_TOKEN *, CORINFO_METHOD_HANDLE, CORINFO_CALLINFO_FLAGS, CORINFO_CALL_INFO *)
                // 93: bool getStaticFieldContent(CORINFO_FIELD_HANDLE, uint8_t *, int, int, bool)
                // 94: bool getObjectContent(CORINFO_OBJECT_HANDLE, uint8_t *, int, int)
                // 95: CORINFO_CLASS_HANDLE getStaticFieldCurrentClass(CORINFO_FIELD_HANDLE, bool *)
                // 96: CORINFO_VARARGS_HANDLE getVarArgsHandle(CORINFO_SIG_INFO *, void **)
                // 97: bool canGetVarArgsHandle(CORINFO_SIG_INFO *)
                // 98: InfoAccessType constructStringLiteral(CORINFO_MODULE_HANDLE, mdToken, void **)
                // 99: InfoAccessType emptyStringLiteral(void **)
                // 9A: uint32_t getFieldThreadLocalStoreID(CORINFO_FIELD_HANDLE, void **)
                // 9B: CORINFO_METHOD_HANDLE GetDelegateCtor(CORINFO_METHOD_HANDLE, CORINFO_CLASS_HANDLE, CORINFO_METHOD_HANDLE, DelegateCtorArgs *)
                // 9C: void MethodCompileComplete(CORINFO_METHOD_HANDLE)
                // 9D: bool getTailCallHelpers(CORINFO_RESOLVED_TOKEN *, CORINFO_SIG_INFO *, CORINFO_GET_TAILCALL_HELPERS_FLAGS, CORINFO_TAILCALL_HELPERS *)
                // 9E: bool convertPInvokeCalliToCall(CORINFO_RESOLVED_TOKEN *, bool)
                // 9F: bool notifyInstructionSetUsage(CORINFO_InstructionSet, bool)
                // A0: void updateEntryPointForTailCall(CORINFO_CONST_LOOKUP *)
                //
                // src\coreclr\inc\corjit.h:166
                // class ICorJitInfo
                // A1: void allocMem(AllocMemArgs *)
                public const int AllocMemIndex = 0xA1;
                // A2: void reserveUnwindInfo(bool, bool, uint32_t)
                // A3: void allocUnwindInfo(uint8_t *, uint8_t *, uint32_t, uint32_t, uint32_t, uint8_t *, CorJitFuncKind)
                // A4: void * allocGCInfo(size_t)
                // A5: void setEHcount(unsigned int)
                // A6: void setEHinfo(unsigned int, const CORINFO_EH_CLAUSE *)
                // A7: bool logMsg(unsigned int, const char *, va_list)
                // A8: int doAssert(const char *, int, const char *)
                // A9: void reportFatalError(CorJitResult)
                // AA: JITINTERFACE_HRESULT getPgoInstrumentationResults(CORINFO_METHOD_HANDLE, PgoInstrumentationSchema **, uint32_t *, uint8_t **, PgoSource *, bool *)
                // AB: JITINTERFACE_HRESULT allocPgoInstrumentationBySchema(CORINFO_METHOD_HANDLE, PgoInstrumentationSchema *, uint32_t, uint8_t **)
                // AC: void recordCallSite(uint32_t, CORINFO_SIG_INFO *, CORINFO_METHOD_HANDLE)
                // AD: void recordRelocation(void *, void *, void *, uint16_t, int32_t)
                // AE: uint16_t getRelocTypeHint(void *)
                // AF: uint32_t getExpectedTargetArchitecture()
                // B0: uint32_t getJitFlags(CORJIT_FLAGS *, uint32_t)

                public const int TotalVtableCount = 0xB1;
            }
        }
    }
}
