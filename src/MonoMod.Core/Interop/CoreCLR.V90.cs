using System.Diagnostics.CodeAnalysis;

namespace MonoMod.Core.Interop
{
    internal static unsafe partial class CoreCLR
    {

        [SuppressMessage("Performance", "CA1812: Avoid uninstantiated internal classes",
            Justification = "It must be non-static to be able to inherit others, as it does. This allows the Core*Runtime types " +
            "to each reference exactly the version they represent, and the compiler automatically resolves the correct one without " +
            "needing duplicates.")]
        [SuppressMessage("Performance", "CA1852", Justification = "This type will be derived for .NET 8.")]
        public class V90 : V80
        {
            public new static class ICorJitInfoVtable
            {

                // src/coreclr/inc/corinfo.h
                // class ICorStaticInfo
                //  0: bool isIntrinsic(MethodDesc*)
                //  1: bool notifyMethodInfoUsage(CORINFO_METHOD_HANDLE)
                //  2: uint32_t getMethodAttribs(MethodDesc*)
                //  3: void setMethodAttribs(MethodDesc*, CorInfoMethodRuntimeFlags)
                //  4: void getMethodSig(MethodDesc*, CORINFO_SIG_INFO*, CORINFO_CLASS_HANDLE = null)
                //  5: bool getMethodInfo(MethodDesc*, CORINFO_METHOD_INFO*)
                //  6: bool haveSameMethodDefinition(CORINFO_METHOD_HANDLE, CORINFO_METHOD_HANDLE)
                //  7: CORINFO_CLASS_HANDLE getTypeDefinition(CORINFO_CLASS_HANDLE)
                //  8: CorInfoInline canInline(MethodDesc* caller, MethodDesc* callee)
                //  9: void beginInlining(MethodDesc*, MethodDesc*)
                //  A: void reportInliningDecision(MethodDesc*, MethodDesc*, CorInfoInline, char const*)
                //  B: bool canTailCall(MethodDesc*, MethodDesc*, MethodDesc*, bool)
                //  C: void reportTailCallDecision(MethodDesc*, MethodDesc*, bool, CorInfoTailCall, char const*)
                //  D: void getEHInfo(MethodDesc*, unsigned, CORINFO_EH_CLAUSE*)
                //  E: CORINFO_CLASS_HANDLE getMethodClass(MethodDesc*)
                //  F: void getMethodVTableOffset(MethodDesc*, unsigned*, unsigned*, bool*)
                // 10: bool resolveVirtualMethod(CORINFO_DEVIRTUALIZATION_INFO*)
                // 11: MethodDesc* getUnboxedEntry(MethodDesc*, bool*)
                // 12: CORINFO_CLASS_HANDLE getDefaultComparerClass(CORINFO_CLASS_HANDLE)
                // 13: CORINFO_CLASS_HANDLE getDefaultEqualityComparerClass(CORINFO_CLASS_HANDLE)
                // 14: void expandRawHandleIntrinisc(CORINFO_RESOLVED_TOKEN*, CORINFO_GENERICHANDLE_RESULT*)
                // 15: bool isIntrinsicType(CORINFO_CLASS_HANDLE)
                // 16: CorInfoCallConvExtension getUnmanagedCallConv(MethodDesc*, CORINFO_SIG_INFO*, bool*)
                // 17: bool pInvokeMarshallingRequired(MethodDesc*, CORINFO_SIG_INFO*)
                // 18: bool satisfiesMethodConstraints((CORINFO_CLASS_HANDLE, MethodDesc*)
                // 19: void methodMustBeLoadedBeforeCodeIsRun(MethodDesc*)
                // 1A: void getGSCookie(GSCookie*, GSCookie**)
                // 1B: void setPatchpointInfo(PatchpointInfo*)
                // 1C: PatchpointInfo* getOSRInfo(unsigned*)
                // Runtime comment: ICorModuleInfo
                // 1D: void resolveToken(CORINFO_RESOLVED_TOKEN*)
                // 1E: void findSig(CORINFO_MODULE_HANDLE, unsigned, CORINFO_CONTEXT_HANDLE, CORINFO_SIG_INFO*)
                // 1F: void findCallSiteSig(CORINFO_MODULE_HANDLE, unsigned, CORINFO_CONTEXT_HANDLE, CORINFO_SIG_INFO*)
                // 20: CORINFO_CLASS_HANDLE getTokenTypeAsHandle(CORINFO_RESOLVED_TOKEN*)
                // 21: int getStringLiteral(CORINFO_MODULE_HANDLE, unsigned, char16_t*, int)
                // 22: size_t printObjectDescription (CORINFO_OBJECT_HANDLE, char*, size_t, size_t*)
                // 23: CorInfoType asCorInfoType(CORINFO_CLASS_HANDLE)
                // 24: char const* getClassNameFromMetadata(CORINFO_CLASS_HANDLE, char const**)
                // 25: CORINFO_CLASS_HANDLE getTypeInstantiationArgument(CORINFO_CLASS_HANDLE, unsigned)
                // 26: size_t printClassName(CORINFO_CLASS_HANDLE, char*, size_t, size_t*)
                // 27: bool isValueClass(CORINFO_CLASS_HANDLE)
                // 28: uint32_t getClassAttribs(CORINFO_CLASS_HANDLE)
                // 29: CORINFO_MODULE_HANDLE getClassModule(CORINFO_CLASS_HANDLE)
                // 2A: CORINFO_ASSEMBLY_HANDLE getModuleAssembly(CORINFO_MODULE_HANDLE)
                // 2B: char const* getAssemblyName(CORINFO_ASSEMBLY_HANDLE)
                // 2C: void* LongLifetimeMalloc(size_t)
                // 2D: void LongLifetimemFree(void*)
                // 2E: bool getIsClassInitedFlagAddress(CORINFO_CLASS_HANDLE, CORINFO_CONST_LOOKUP*, int*)
                // 2F: size_t getClassStaticDynamicInfo(CORINFO_CLASS_HANDLE)
                // 30: size_t getClassThreadStaticDynamicInfo(CORINFO_CLASS_HANDLE)
                // 31: bool getStaticBaseAddress(CORINFO_CLASS_HANDLE, bool, CORINFO_CONST_LOOKUP*)
                // 32: unsigned getClassSize(CORINFO_CLASS_HANDLE)
                // 33: unsigned getHeapClassSize(CORINFO_CLASS_HANDLE)
                // 34: bool canAllocateOnStack(CORINFO_CLASS_HANDLE)
                // 35: unsigned getClassAlignmentRequirement(CORINFO_CLASS_HANDLE, bool=false)
                // 36: unsigned getClassGClayout(CORINFO_CLASS_HANDLE, uint8_t*)
                // 37: unsigned getClassNumInstanceFields(CORINFO_CLASS_HANDLE)
                // 38: CORINFO_FIELD_HANDLE getFieldInClass(CORINFO_CLASS_HANDLE, int32_t)
                // 39: GetTypeLayoutResult getTypeLayout(CORINFO_CLASS_HANDLE, CORINFO_TYPE_LAYOUT_MODE*, size_t*)
                // 3A: bool checkMethodModifier(MethodTable*, char const*, bool)
                // 3B: CorInfoHelpFunc getNewHelper(CORINFO_RESOLVED_TOKEN*, MethodTable*, bool*)
                // 3C: CorInfoHelpFunc getNewArrHelper(CORINFO_CLASS_HANDLE)
                // 3D: CorInfoHelpFunc getCastingHelper(CORINFO_RESOLVED_TOKEN*, bool)
                // 3E: CorInfoHelpFunc getSharedCCtorHelper(CORINFO_CLASS_HANDLE)
                // 3F: CORINFO_CLASS_HANDLE getTypeForBox(CORINFO_CLASS_HANDLE)
                // 40: CORINFO_CLASS_HANDLE getTypeForBoxOnStack(CORINFO_CLASS_HANDLE)
                // 41: CorInfoHelpFunc getBoxHelper(CORINFO_CLASS_HANDLE)
                // 42: CorInfoHelpFunc getUnBoxHelper(CORINFO_CLASS_HANDLE)
                // 43: CORINFO_OBJECT_HANDLE getRuntimeTypePointer(CORINFO_CLASS_HANDLE)
                // 44: bool isObjectImmutable(CORINFO_OBJECT_HANDLE)
                // 45: bool getStringChar(CORINFO_OBJECT_HANDLE, int, uint16_t*)
                // 46: CORINFO_CLASS_HANDLE getObjectType(CORINFO_OBJECT_HANDLE)
                // 47: bool getReadyToRunHelper(CORINFO_RESOLVED_TOKEN*, CORINFO_LOOKUP_KIND*, CorInfoHelpFunc, CORINFO_CONST_LOOKUP*)
                // 48: void getReadyToRunDelegateCtorHelper(CORINFO_RESOLVED_TOKEN*, mdToken, CORINFO_CLASS_HANDLE, CORINFO_LOOKUP*)
                // 49: CorInfoInitClassResult initClass(CORINFO_FIELD_HANDLE, CORINFO_METHOD_HANDLE, CORINFO_CONTEXT_HANDLE)
                // 4A: void classMustBeLoadedBeforeCodeIsRun(CORINFO_CLASS_HANDLE)
                // 4B: CORINFO_CLASS_HANDLE getBuiltinClass(CorInfoClassId)
                // 4C: CorInfoType getTypeForPrimitiveValueClass(CORINFO_CLASS_HANDLE)
                // 4D: CorInfoType getTypeForPrimitiveNumericClass(CORINFO_CLASS_HANDLE)
                // 4E: bool canCast(CORINFO_CLASS_HANDLE)
                // 4F: TypeCompareState compareTypesForCast(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE)
                // 50: TypeCompareState compareTypesForEquality(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE
                // 51: bool isMoreSpecificType(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE)
                // 52: bool isExactType(CORINFO_CLASS_HANDLE)
                // 53: TypeCompareState isGenericType(CORINFO_CLASS_HANDLE)
                // 54: TypeCompareState isNullableType(CORINFO_CLASS_HANDLE)
                // 55: TypeCompareState isEnum(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE*)
                // 56: CORINFO_CLASS_HANDLE getParentType(CORINFO_CLASS_HANDLE)
                // 57: CorInfoType getChildType(CORINFO_CLASS_HANDLE, CORINFO_CLASS_HANDLE*)
                // 58: bool isSDArray(CORINFO_CLASS_HANDLE)
                // 59: unsigned getArrayRank(CORINFO_CLASS_HANDLE)
                // 5A: CorInfoArrayIntrinsic getArrayIntrinsicID(CORINFO_METHOD_HANDLE)
                // 5B: void* getArrayInitializationData(CORINFO_FIELD_HANDLE, uint32_t)
                // 5C: CorInfoIsAccessAllowedResult canAccessClass(CORINFO_RESOLVED_TOKEN*, CORINFO_METHOD_HANDLE, CORINFO_HELPER_DESC*)
                // Runtime comment: ICorFieldInfo
                // 5D: size_t printFieldName(CORINFO_FIELD_HANDLE, char*, size_t, size_t*)
                // 5E: CORINFO_CLASS_HANDLE getFieldClass(CORINFO_FIELD_HANDLE)
                // 5F: CorInfoType getFieldType(CORINFO_FIELD_HANDLE, CORINFO_CLASS_HANDLE*, CORINFO_CLASS_HANDLE)
                // 60: unsigned getFieldOffset(CORINFO_FIELD_HANDLE)
                // 61: void getFieldInfo(CORINFO_RESOLVED_TOKEN*, CORINFO_METHOD_HANDLE, CORINFO_ACCESS_FLAGS, CORINFO_FIELD_INFO)
                // 62: uint32_t getThreadLocalFieldInfo(CORINFO_FIELD_HANDLE, bool)
                // 63: void getThreadLocalStaticBlockInfo(CORINFO_THREAD_STATIC_BLOCKS_INFO*, bool)
                // 64: void getThreadLocalStaticInfo_NativeAOT(CORINFO_THREAD_STATIC_INFO_NATIVEAOT*, bool)
                // 65: bool isFieldStatic(CORINFO_FIELD_HANDLE)
                // 66: int getArrayOrStringLength(CORINFO_OBJECT_HANDLE)
                // Runtime comment: ICorDebugInfo
                // 67: void getBoundaries(CORINFO_METHOD_HANDLE, unsigned int*, uint32_t**, ICorDebugInfo::BoundaryTypes*)
                // 68: void setBoundaries(CORINFO_METHOD_HANDLE, uint32_t, ICorDebugInfo::OffsetMapping*)
                // 69: void getVars(CORINFO_METHOD_HANDLE, uint32_t*, ICorDebugInfo::ILVarInfo**, bool*)
                // 6A: void setVars(CORINFO_METHOD_HANDLE, uint32_t, ICorDebugINfo:;NativeCatInfo*)
                // 6B: void reportRichMappings(ICorDebugInfo::InlineTreeNode*, uint32_t, ICodDebugInfo::RichOffsetMapping*, uint32_t)
                // 6C: void reportMetadata(const char*, const void*, size_t)
                // 6D: void* allocateArray(size_t)
                // 6E: void freeArray(void*)
                // Runtime comment: ICorArgInfo
                // 6F: CORINFO_ARG_LIST_HANDLE getArgNext(CORINFO_ARG_LIST_HANDLE)
                // 70: CorInfoTypeWithMod getArgType(CORINFO_SIG_INFO*, CORINFO_ARG_LIST_HANDLE, CORINFO_CLASS_HANDLE*)
                // 71: int getExactClasses(CORINFO_CLASS_HANDLE, int, CORINFO_CLASS_HANDLE*)
                // 72: CORINFO_CLASS_HANDLE getArgClass(CORINFO_SIG_INFO*, CORINFO_ARG_LIST_HANDLE)
                // 73: CorInfoHFAElemType getHFAType(CORINFO_CLASS_HANDLE)
                // 74: bool runWithErrorTrap(errorTrapFunction, void*)
                // 75: bool runWithSPMIErrorTrap(errorTrapFunction, void*)
                // 76: void getEEInfo(CORINFO_EE_INFO*)
                // 77: char16_t const* getJitTimeLogFilename()
                // 78: mdMethodDef getMethodDefFromMethod(CORINFO_METHOD_HANDLE)
                // 79: size_t printMethodName(CORINFO_METHOD_HANDLE, char*, size_t, size_t*)
                // 7A: char const* getMethodNameFromMetadata(CORINFO_METHOD_HANDLE, char const**, char const**, char const**)
                // 7B: unsigned getMethodHash(CORINFO_METHOD_HANDLE)
                // 7C: bool getSystemVAmd64PassStructInRegisterDescriptor(CORINFO_CLASS_HANDLE, SYSTEMV_AMD64_CORINFO_STRUCT_REG_PASSING_DESCRIPTOR)
                // 7D: uint32_t getLoongArch64PassStructInRegisterFlags(CORINFO_CLASS_HANDLE)
                // 7E: uint32_t getRISCV64PassStructInRegisterFlags(CORINFO_CLASS_HANDLE)

                // src/coreclr/inc/corinfo.h
                // class ICorDynamicInfo : public ICorStaticInfo
                // 7F: uint32_t getThreadTLSIndex(void**=null)
                // 80: int32_t* getAddrOfCaptureThreadGlobal(void**=null)
                // 81: void* getHelperFtn(CorInfoHelpFunc,void**=null)
                // 82: void getFunctionEntryPoint(CORINFO_METHOD_HANDLE, CORINFO_CONST_LOOKUP*, CORINFO_ACCESS_FLAGS=ANY)
                // 83: void getFunctionFixedEntryPoint(CORINFO_METHOD_HANDLE, bool, CORINFO_CONST_LOOKUP*)
                // 84: void* getMethodSync(CORINFO_METHOD_HANDLE, void**=null)
                // 85: CorInfoHelpFunc getLazyStringLiteralHelper(CORINFO_MODULE_HANDLE)
                // 86: CORINFO_MODULE_HANDLE embedModuleHandle(CORINFO_MODULE_HANDLE, void**=null)
                // 87: CORINFO_CLASS_HANDLE embedClassHandle(CORINFO_CLASS_HANDLE, void**=null)
                // 88: CORINFO_METHOD_HANDLE embedMethodHandle(CORINFO_METHOD_HANDLE, void**=null)
                // 89: CORINFO_FIELD_HANDLE embedFieldHandle(CORINFO_FIELD_HANDLE, void**=null)
                // 8A: void embedGenericHandle(CORINFO_RESOLVED_TOKEN*, bool, CORINFO_GENERICHANDLE_RESULT*)
                // 8B: void getLocationOfThisType(CORINFO_METHOD_HANDLE, CORINFO_LOOKUP_KIND*)
                // 8C: void getAddressOfPInvokeTarget(CORINFO_METHOD_HANDLE, CORINFO_CONST_LOOKUP*)
                // 8D: void* GetCookieForPINvokeCalliSig(CORINFO_SIG_INFO*, void**=null)
                // 8E: bool canGetCookieForPInvokeCalliSig(CORINFO_SIG_INFO*)
                // 8F: CORINFO_JUST_MY_CODE_HANDLE getJustMyCodeHandle(CORINFO_METHOD_HANDLE, CORINFO_JUST_MY_CODE_HANDLE**=null)
                // 90: void GetProfilingHandle(bool*, void**, bool*)
                // 91: void getCallInfo(CORINFO_RESOLVED_TOKEN*, CORINFO_RESOLVED_TOKEN*, CORINFO_METHOD_HANDLE, CORINFO_CALLINFO_FLAGS, CORINFO_CALL_INFO*)
                // 92: bool getStaticFieldContent(CORINFO_FIELD_HANDLE, uint8_t, int, int, bool)
                // 93: bool getObjectContent(CORINFO_OBJECT_HANDLE, uint8_t*, int, int)
                // 94: CORINFO_CLASS_HANDLE getStaticFieldCurrentClass(CORINFO_FIELD_HANDLE, bool*=null)
                // 95: CORINFO_VARARGS_HANDLE getVarArgsHandle(CORINFO_SIG_INFO*, void**=null)
                // 96: bool canGetVarArgsHandle(CORINFO_SIG_INFO*)
                // 97: InfoAccessType constructStringLiteral(CORINFO_MODULE_HANDLE, mdToken, void**)
                // 98: InfoAccessType emptyStringLiteral(void**)
                // 99: uint32_t getFieldThreadLocalStoreID(CORINFO_FIELD_HANDLE, void**=null)
                // 9A: CORINFO_METHOD_HANDLE GetDelegateCtor(CORINFO_METHOD_HANDLE< CORINFO_CLASS_HANDLE, CORINFO_METHOD_HANDLE, DelegateCtorArgs*)
                // 9B: void MethodCompileComplete(CORINFO_METHOD_HANDLE)
                // 9C: bool getTailCallHelpers(CORINFO_RESOLVED_TOKEN*, CORINFO_SIG_INFO*, CORINFO_GET_TAILCALL_HELPERS_FLAGS, CORINFO_TAILCALL_HELPERS*)
                // 9D: bool convertPInvokeCalliToCall(CORINFO_RESOLVED_TOKEN*, bool)
                // 9E: bool notifyInstructionSetUsage(CORINFO_InstructionSet, bool)
                // 9F: void updateEntryPointForTailCall(CORINFO_CONST_LOOKUP*)

                // src/coreclr/inc/corjit.h
                // class ICorJitInfo : public ICorDynamicInfo
                // A0: void allocMem(AllocMemArgs*)
                public const int AllocMemIndex = 0xA0;
                // A1: void reserveUnwindInfo(bool, bool, uint33_t)
                // A2: void allocUnwindInfo(uint8_t*, uint8_t*, uint32_t, uint32_t, uint32_t, uint8_t*, CorJitFuncKind)
                // A3: void* allocGCInfo(size_t)
                // A4: void setEHcount(unsigned)
                // A5: void setEHinfo(unsigned, CORINFO_EH_CLAUSE const*)
                // A6: bool logMsg(unsigned, char const*, va_list)
                // A7: int doAssert(char const*, int, char const*)
                // A8: void reportFatalError(CorJitResult)
                // A9: JITINTERFACE_HRESULT getPgoInstrumentationResults(CORINFO_METHOD_HANDLE, PgoInstrumentationSchema**, uint32_t*, uint8_t**, PgoSource*)
                // AA: JITINTERFACE_HRESULT allocPgoInstrumentationBySchema(CORINFO_METHOD_HANDLE, PgoInstrumentationSchema*)
                // AB: void recordCallSite(uint32_t, CORINFO_SIG_INFO*, CORINFO_METHOD_HANDLE)
                // AC: void recordRelocation(void*, void*, void*, uint16_t, uint16_t, int32_t)
                // AD: uint16_t getRelocTypeHint(void*)
                // AE: uint32_t getExpectedTargetArchitecture()
                // AF: uint32_t getJitFlags(CORJIT_FLAGS*, uint32_t)

                public const int TotalVtableCount = 0xB0;
            }
        }
    }
}
