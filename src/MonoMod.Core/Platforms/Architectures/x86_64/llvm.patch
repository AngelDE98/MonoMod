diff --git a/lld/MachO/InputFiles.cpp b/lld/MachO/InputFiles.cpp
index e1289103faf7..be94fa5288cf 100644
--- a/lld/MachO/InputFiles.cpp
+++ b/lld/MachO/InputFiles.cpp
@@ -1285,7 +1285,8 @@ static CIE parseCIE(const InputSection *isec, const EhReader &reader,
 // EH frame target addresses may be encoded as pcrel offsets. However, instead
 // of using an actual pcrel reloc, ld64 emits subtractor relocations instead.
 // This function recovers the target address from the subtractors, essentially
-// performing the inverse operation of EhRelocator.
+// performing the inverse operation of EhRelocator. In case it is an ordinary
+// relocation, it is resolved normally instead.
 //
 // Concretely, we expect our relocations to write the value of `PC -
 // target_addr` to `PC`. `PC` itself is denoted by a minuend relocation that
@@ -1318,9 +1319,12 @@ template <bool Invert = false>
 Defined *
 targetSymFromCanonicalSubtractor(const InputSection *isec,
                                  std::vector<macho::Reloc>::iterator relocIt) {
+  // Some object files have normal relocations here
+  if (!target->hasAttr(relocIt->type, RelocAttrBits::SUBTRAHEND))
+    return cast<Defined>(relocIt->referent.get<macho::Symbol *>());
+
   macho::Reloc &subtrahend = *relocIt;
   macho::Reloc &minuend = *std::next(relocIt);
-  assert(target->hasAttr(subtrahend.type, RelocAttrBits::SUBTRAHEND));
   assert(target->hasAttr(minuend.type, RelocAttrBits::UNSIGNED));
   // Note: pcSym may *not* be exactly at the PC; there's usually a non-zero
   // addend.
@@ -1452,10 +1456,13 @@ void ObjFile::registerEhFrames(Section &ehFrameSection) {
     auto funcAddrRelocIt = isec->relocs.end();
     auto lsdaAddrRelocIt = isec->relocs.end();
     for (auto it = isec->relocs.begin(); it != isec->relocs.end(); ++it) {
-      if (it->offset == funcAddrOff)
-        funcAddrRelocIt = it++; // Found subtrahend; skip over minuend reloc
-      else if (lsdaAddrOpt && it->offset == lsdaAddrOff)
-        lsdaAddrRelocIt = it++; // Found subtrahend; skip over minuend reloc
+      if (it->offset == funcAddrOff) {
+        funcAddrRelocIt = it; // Found a reloc; skip over minuend reloc if it's a subtrahend reloc
+        if (target->hasAttr(it->type, RelocAttrBits::SUBTRAHEND)) it++;
+      } else if (lsdaAddrOpt && it->offset == lsdaAddrOff) {
+        lsdaAddrRelocIt = it; // Found a reloc; skip over minuend reloc if it's a subtrahend reloc
+        if (target->hasAttr(it->type, RelocAttrBits::SUBTRAHEND)) it++;
+      }
     }
 
     Defined *funcSym;
