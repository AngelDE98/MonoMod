diff --git a/lld/MachO/InputFiles.cpp b/lld/MachO/InputFiles.cpp
index ed0d98a2ecec..98601f7e3125 100644
--- a/lld/MachO/InputFiles.cpp
+++ b/lld/MachO/InputFiles.cpp
@@ -1286,7 +1286,8 @@ static CIE parseCIE(const InputSection *isec, const EhReader &reader,
 // EH frame target addresses may be encoded as pcrel offsets. However, instead
 // of using an actual pcrel reloc, ld64 emits subtractor relocations instead.
 // This function recovers the target address from the subtractors, essentially
-// performing the inverse operation of EhRelocator.
+// performing the inverse operation of EhRelocator. In case it is an ordinary
+// relocation, it is resolved normally instead.
 //
 // Concretely, we expect our relocations to write the value of `PC -
 // target_addr` to `PC`. `PC` itself is denoted by a minuend relocation that
@@ -1319,16 +1320,43 @@ template <bool Invert = false>
 Defined *
 targetSymFromCanonicalSubtractor(const InputSection *isec,
                                  std::vector<macho::Reloc>::iterator relocIt) {
+  // Some object files have normal relocations here
+  if (!target->hasAttr(relocIt->type, RelocAttrBits::SUBTRAHEND)) {
+    Defined *target =
+      cast_or_null<Defined>(relocIt->referent.dyn_cast<macho::Symbol *>());
+
+    // Adjust the addend for x86-64 signed relocations
+    int64_t relocAddend = relocIt->addend;
+    switch (relocIt->type) {
+      case X86_64_RELOC_SIGNED:
+      case X86_64_RELOC_SIGNED_1:
+      case X86_64_RELOC_SIGNED_2:
+      case X86_64_RELOC_SIGNED_4:
+        // The loader would resolve with the PC 4 bytes after the relocation
+        // Adjust the addend to cancel this out
+        relocAddend -= 4;
+        break;
+    }
+
+    if (target) {
+      auto *relocIsec = cast<ConcatInputSection>(target->isec);
+      return findSymbolAtOffset(relocIsec, target->value + relocAddend);
+    } else {
+      auto *relocIsec =
+          cast<ConcatInputSection>(relocIt->referent.get<InputSection *>());
+      return findSymbolAtOffset(relocIsec, relocAddend);
+    }
+  }
+
   macho::Reloc &subtrahend = *relocIt;
   macho::Reloc &minuend = *std::next(relocIt);
-  assert(target->hasAttr(subtrahend.type, RelocAttrBits::SUBTRAHEND));
   assert(target->hasAttr(minuend.type, RelocAttrBits::UNSIGNED));
   // Note: pcSym may *not* be exactly at the PC; there's usually a non-zero
   // addend.
   auto *pcSym = cast<Defined>(subtrahend.referent.get<macho::Symbol *>());
   Defined *target =
       cast_or_null<Defined>(minuend.referent.dyn_cast<macho::Symbol *>());
-  if (!pcSym) {
+  if (!target) {
     auto *targetIsec =
         cast<ConcatInputSection>(minuend.referent.get<InputSection *>());
     target = findSymbolAtOffset(targetIsec, minuend.addend);
@@ -1453,10 +1481,13 @@ void ObjFile::registerEhFrames(Section &ehFrameSection) {
     auto funcAddrRelocIt = isec->relocs.end();
     auto lsdaAddrRelocIt = isec->relocs.end();
     for (auto it = isec->relocs.begin(); it != isec->relocs.end(); ++it) {
-      if (it->offset == funcAddrOff)
-        funcAddrRelocIt = it++; // Found subtrahend; skip over minuend reloc
-      else if (lsdaAddrOpt && it->offset == lsdaAddrOff)
-        lsdaAddrRelocIt = it++; // Found subtrahend; skip over minuend reloc
+      if (it->offset == funcAddrOff) {
+        funcAddrRelocIt = it; // Found a reloc; skip over minuend reloc if it's a subtrahend reloc
+        if (target->hasAttr(it->type, RelocAttrBits::SUBTRAHEND)) it++;
+      } else if (lsdaAddrOpt && it->offset == lsdaAddrOff) {
+        lsdaAddrRelocIt = it; // Found a reloc; skip over minuend reloc if it's a subtrahend reloc
+        if (target->hasAttr(it->type, RelocAttrBits::SUBTRAHEND)) it++;
+      }
     }
 
     Defined *funcSym;
@@ -1467,12 +1498,13 @@ void ObjFile::registerEhFrames(Section &ehFrameSection) {
       // to register the unwind entry under same symbol.
       // This is not particularly efficient, but we should run into this case
       // infrequently (only when handling the output of `ld -r`).
-      if (funcSym->isec)
+      if (funcSym && funcSym->isec)
         funcSym = findSymbolAtOffset(cast<ConcatInputSection>(funcSym->isec),
                                      funcSym->value);
     } else {
       funcSym = findSymbolAtAddress(sections, funcAddr);
-      ehRelocator.makePcRel(funcAddrOff, funcSym, target->p2WordSize);
+      if (funcSym)
+        ehRelocator.makePcRel(funcAddrOff, funcSym, target->p2WordSize);
     }
     // The symbol has been coalesced, or already has a compact unwind entry.
     if (!funcSym || funcSym->getFile() != this || funcSym->unwindEntry) {
diff --git a/lld/MachO/UnwindInfoSection.cpp b/lld/MachO/UnwindInfoSection.cpp
index b7d0d563360a..bc825e49b6cd 100644
--- a/lld/MachO/UnwindInfoSection.cpp
+++ b/lld/MachO/UnwindInfoSection.cpp
@@ -466,6 +466,22 @@ void UnwindInfoSectionImpl::finalize() {
     return cuEntries[a].functionAddress < cuEntries[b].functionAddress;
   });
 
+  // Fix up function boundaries by erasing all entries without an encoding
+  // which fall into the bounds of another function with unwind info
+  auto funcWrite = cuIndices.begin();
+  uint64_t funcEnd = 0;
+  for (auto funcIt = cuIndices.begin(); funcIt != cuIndices.end(); ++funcIt) {
+    CompactUnwindEntry& cu = cuEntries[*funcIt];
+
+    // Skip entries without an encoding which are in the range of another function
+    if (!cu.encoding && cu.functionAddress < funcEnd)
+        continue;
+
+    funcEnd = cu.functionAddress + cu.functionLength;
+    *funcWrite++ = *funcIt;
+  }
+  cuIndices.erase(funcWrite, cuIndices.end());
+
   // Record the ending boundary before we fold the entries.
   cueEndBoundary = cuEntries[cuIndices.back()].functionAddress +
                    cuEntries[cuIndices.back()].functionLength;
