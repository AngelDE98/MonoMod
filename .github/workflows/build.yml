name: Build + Test
on:
  push:
  pull_request:
  
defaults:
  run:
    shell: pwsh

env:
  DOTNET_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  NUGET_PACKAGES: ${{github.workspace}}/artifacts/pkg

# We'll have a job for building (that runs on x64 machines only, one for each OS to make sure it actually builds)
# Then, we'll take the result from one of those (probaly Linux) and distribute build artifacts to testers to run
# a load of tests. This will (eventually) include ARM runners, where possible.
jobs:
  compute-version:
    runs-on: ubuntu-latest
    outputs:
      ver: ${{ steps.computever.outputs.ver }}
    steps:
    - id: computever
      run: echo "ver=$(Get-Date -Format y.M.d).${{ github.run_number }}.${{ github.run_attempt }}" >> $env:GITHUB_OUTPUT
  
  build:
    needs: compute-version
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        include:
        - os: ubuntu-latest
          name: Linux
          upload-packages: true
          upload-tests: true
        - os: windows-latest
          name: Windows
        - os: macos-13
          name: MacOS
          
    name: 'Build #${{needs.compute-version.outputs.ver}} (${{matrix.name}})'
    runs-on: ${{ matrix.os }}
    env:
      VersionSuffix: daily.${{needs.compute-version.outputs.ver}}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
        submodules: recursive

    # TODO: maybe we can eventually use package locks for package caching?
    - name: Install .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json
        
    # NOTE: manual package caching
    - name: Cache restored NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-v1-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets', 'nuget.config', 'global.json') }}
        restore-keys: ${{ runner.os }}-nuget-v1-
    - name: Restore
      run: dotnet restore -bl:restore.binlog -noAutoRsp

    - name: Build
      run: dotnet build --no-restore -c Release -p:ContinuousIntegrationBuild=true -bl:build.binlog -clp:NoSummary -noAutoRsp

    - name: Pack
      run: dotnet pack --no-restore -c Release -p:ContinuousIntegrationBuild=true -bl:pack.binlog -clp:NoSummary -noAutoRsp

    - name: Upload binlogs
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: binlogs-${{ matrix.name }}
        path: '*.binlog'
        retention-days: 7

    - name: Archive packages
      uses: actions/upload-artifact@v4
      if: ${{ matrix.upload-packages }}
      with:
        name: packages
        path: artifacts/package/release/*.nupkg

    - name: Upload test assets
      uses: actions/upload-artifact@v4
      if: ${{ matrix.upload-tests }}
      with:
        name: test-assets
        retention-days: 1
        path: |
          artifacts/bin/MonoMod.UnitTest/*/**/*

  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        dotnet-version:
          - fx
          - mono
          - 2.1.x
          - 3.0.x
          - 3.1.x
          - 5.0.x
          - 6.0.x
          - 7.0.x
          - 8.0.x
        include:
          # some extra OS configuration info
          - os: ubuntu-latest
            osname: Linux
          - os: windows-latest
            osname: Windows
          - os: macos-13
            osname: MacOS 13

          # .NET version -> TFM mapping
          - dotnet-version: fx
            tfm: net46
            fxname: .NET Framework 4.x
          - dotnet-version: mono
            tfm: net46
            fxname: Mono
          - dotnet-version: 2.1.x
            tfm: netcoreapp2.1
            fxname: .NET Core 2.1
          - dotnet-version: 3.0.x
            tfm: netcoreapp3.0
            fxname: .NET Core 3.0
          - dotnet-version: 3.1.x
            tfm: netcoreapp3.1
            fxname: .NET Core 3.1
          - dotnet-version: 5.0.x
            tfm: net5.0
            fxname: .NET 5.0
          - dotnet-version: 6.0.x
            tfm: net6.0
            fxname: .NET 6.0
          - dotnet-version: 7.0.x
            tfm: net7.0
            fxname: .NET 7.0
          - dotnet-version: 8.0.x
            tfm: net8.0
            fxname: .NET 8.0

        exclude:
          # remove Framework and Mono where appropriate
          - os: ubuntu-latest
            dotnet-version: fx
          - os: macos-13
            dotnet-version: fx
          - os: windows-latest
            dotnet-version: mono

    name: Test ${{ matrix.fxname }} on ${{ matrix.osname }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install global SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Download test assets
      uses: actions/download-artifact@v4
      with:
        name: test-assets
        
    # For some reason .NET Core 2.1 (and only it!) needs a package restore; it looks there for the testhost for some reason
    - name: Load cached NuGet packages
      uses: actions/cache@v4
      if: ${{ matrix.tfm == 'netcoreapp2.1' }}
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-v1-
        restore-keys: ${{ runner.os }}-nuget-v1-
        fail-on-cache-miss: true

    - name: Install test target runtime SDK
      uses: actions/setup-dotnet@v4
      if: ${{ matrix.dotnet-version != 'mono' && matrix.dotnet-version != 'fx' }}
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    - name: Run tests
      if: ${{ matrix.dotnet-version != 'mono' }}
      run: dotnet test -f ${{ matrix.tfm }} -l:"trx;LogFileName=testresults.${{matrix.os}}.${{matrix.dotnet-version}}.trx" release_${{ matrix.tfm }}/MonoMod.UnitTest.dll

    # TODO: Mono?

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: test-results-${{ matrix.osname }}-${{ matrix.dotnet-version }}
        retention-days: 1
        path: 'TestResults/*.trx'

  publish-test-results:
    needs: [build, test]
    if: ${{ always() && needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    name: Publish test results
    permissions:
      checks: write
      pull-requests: write
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: '*.trx'
        comment_mode: ${{ (github.event.workflow_run.event == 'pull_request' || github.event_name == 'pull_request') && 'failures' || 'off' }}
        report_individual_runs: true
