name: Build + Test
on:
  push:
  pull_request:
  
defaults:
  run:
    shell: pwsh

env:
  DOTNET_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  NUGET_PACKAGES: ${{github.workspace}}/artifacts/pkg

# We'll have a job for building (that runs on x64 machines only, one for each OS to make sure it actually builds)
# Then, we'll take the result from one of those (probaly Linux) and distribute build artifacts to testers to run
# a load of tests. This will (eventually) include ARM runners, where possible.
jobs:
  compute-version:
    name: Compute Version
    runs-on: ubuntu-latest
    outputs:
      ver: ${{ steps.computever.outputs.ver }}
    steps:
    - id: computever
      run: echo "ver=$(Get-Date -Format y.M.d).${{ github.run_number }}.${{ github.run_attempt }}" >> $env:GITHUB_OUTPUT
  
  build:
    needs: compute-version
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        include:
        - os: ubuntu-latest
          name: Linux
          upload-packages: true
          upload-tests: true
        - os: windows-latest
          name: Windows
        - os: macos-13
          name: MacOS
          
    name: 'Build #${{needs.compute-version.outputs.ver}} (${{matrix.name}})'
    runs-on: ${{ matrix.os }}
    env:
      VersionSuffix: daily.${{needs.compute-version.outputs.ver}}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
        submodules: recursive

    # TODO: maybe we can eventually use package locks for package caching?
    #- name: Install .NET SDK
    #  uses: actions/setup-dotnet@v4
    #  with:
    #    global-json-file: global.json

    - name: Install .NET SDK
      uses: nike4613/install-dotnet@6e785e8b036f6f294c297beab2b875d4cc28a1a0
      with:
        global-json: global.json
        
    # NOTE: manual package caching
    - name: Cache restored NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-v1-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets', 'nuget.config', 'global.json') }}
        restore-keys: ${{ runner.os }}-nuget-v1-
    - name: Restore
      run: dotnet restore -bl:restore.binlog -noAutoRsp

    - name: Build
      run: dotnet build --no-restore -c Release -p:ContinuousIntegrationBuild=true -bl:build.binlog -clp:NoSummary -noAutoRsp

    - name: Pack
      run: dotnet pack --no-restore -c Release -p:ContinuousIntegrationBuild=true -bl:pack.binlog -clp:NoSummary -noAutoRsp

      # TODO: it might be worth trying to do a "smoketest" test run with the installed tfm to broadly make sure that all builds
      #       work. We may also want to do a hash check on the packages, though I have no idea how reliable that would be.

    - name: Upload binlogs
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: binlogs-${{ matrix.name }}
        path: '*.binlog'
        retention-days: 7

    - name: Archive packages
      uses: actions/upload-artifact@v4
      if: ${{ matrix.upload-packages }}
      with:
        name: packages
        path: artifacts/package/release/*.nupkg

    - name: Upload test assets
      uses: actions/upload-artifact@v4
      if: ${{ matrix.upload-tests }}
      with:
        name: test-assets
        retention-days: 1
        path: |
          artifacts/bin/MonoMod.UnitTest/*/**/*

  compute-test-matrix:
    name: Compute Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.compute-matrix.outputs.matrix }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: false
        submodules: false
    - name: Compute test matrix
      id: compute-matrix
      run: ./.github/gen-test-matrix.ps1 -MatrixOutName matrix -GithubOutput $env:GITHUB_OUTPUT
      
  test:
    needs: [compute-test-matrix, build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.compute-test-matrix.outputs.matrix) }}

    name: Test ${{ matrix.title }}
    runs-on: ${{ matrix.os.runner }}
    env:
      LOG_FILE_NAME: testresults.${{ matrix.os.runner }}.${{ matrix.dotnet.id != '' && matrix.dotnet.id || matrix.dotnet.sdk }}.${{ matrix.arch }}.trx
    steps:    
    - name: Checkout
      uses: actions/checkout@v4
      if: ${{ matrix.dotnet.needsRestore }}
      with:
        lfs: true
        submodules: recursive
        
    - name: Install global SDK
      if: ${{ ! matrix.dotnet.needsRestore }}
      uses: nike4613/install-dotnet@6e785e8b036f6f294c297beab2b875d4cc28a1a0
      with:
        version: "8.0"
        
    - name: Cache restored NuGet packages
      uses: actions/cache@v4
      if: ${{ matrix.dotnet.needsRestore }}
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-v1-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets', 'nuget.config', 'global.json') }}
        restore-keys: ${{ runner.os }}-nuget-v1-
    - name: Install restore SDK
      if: ${{ matrix.dotnet.needsRestore }}
      uses: nike4613/install-dotnet@6e785e8b036f6f294c297beab2b875d4cc28a1a0
      with:
        global-json: global.json

    - name: Restore packages
      if: ${{ matrix.dotnet.needsRestore }}
      run: dotnet restore -noAutoRsp

    - name: Download test assets
      uses: actions/download-artifact@v4
      with:
        name: test-assets
        
    - name: Install test target runtime
      if: ${{ matrix.dotnet.sdk != '' }}
      uses: nike4613/install-dotnet@6e785e8b036f6f294c297beab2b875d4cc28a1a0
      with:
        version: ${{ matrix.dotnet.sdk }}
        architecture: ${{ matrix.arch }}
        runtime: dotnet

    - name: Run tests
      if: ${{ ! matrix.dotnet.isMono && ! matrix.dotnet.pgo }}
      run: dotnet test -f ${{ matrix.dotnet.tfm }} -a ${{ matrix.arch }} -l:"trx;LogFileName=$($env:LOG_FILE_NAME)" release_${{ matrix.dotnet.tfm }}/MonoMod.UnitTest.dll

    - name: Run tests (PGO)
      if: ${{ matrix.dotnet.pgo }}
      env:
        DOTNET_ReadyToRun: ${{ matrix.usePgo && 0 || 1 }}
        DOTNET_TC_QuicJitForLoops: ${{ matrix.usePgo && 1 || 0 }}
        DOTNET_TieredPGO: ${{ matrix.usePgo && 1 || 0 }}
      run: dotnet test -f ${{ matrix.dotnet.tfm }} -a ${{ matrix.arch }} -l:"trx;LogFileName=$($env:LOG_FILE_NAME)" release_${{ matrix.dotnet.tfm }}/MonoMod.UnitTest.dll

    # TODO: Mono?

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: test-results ${{ matrix.title }}
        retention-days: 1
        path: 'TestResults/*.trx'

  publish-test-results:
    needs: [build, test]
    if: ${{ always() && needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    name: Publish test results
    permissions:
      checks: write
      pull-requests: write
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results *
        merge-multiple: false
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: '**/*.trx'
        comment_mode: ${{ (github.event.workflow_run.event == 'pull_request' || github.event_name == 'pull_request') && 'failures' || 'off' }}
        report_individual_runs: true
